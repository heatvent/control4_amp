Current contents of [config_flow.py]: 
import voluptuous as vol
from homeassistant import config_entries
from homeassistant.core import callback
import homeassistant.helpers.config_validation as cv

from .const import DOMAIN  # Import the DOMAIN constant

class Control4AmpConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
    VERSION = 1

    async def async_step_user(self, user_input=None):
        errors = {}
        if user_input is not None:
            return self.async_create_entry(title="Control4 Amplifier", data=user_input)

        data_schema = vol.Schema({
            vol.Required("host"): str,
            vol.Required("port", default=8750): int,
        })

        return self.async_show_form(
            step_id="user",
            data_schema=data_schema,
            errors=errors,
        )

    @staticmethod
    @callback
    def async_get_options_flow(config_entry):
        return Control4AmpOptionsFlowHandler(config_entry)

class Control4AmpOptionsFlowHandler(config_entries.OptionsFlow):
    def __init__(self, config_entry):
        self.config_entry = config_entry

    async def async_step_init(self, user_input=None):
        if user_input is not None:
            return self.async_create_entry(title="", data=user_input)

        data_schema = vol.Schema({
            vol.Required("host", default=self.config_entry.data["host"]): str,
            vol.Required("port", default=self.config_entry.data.get("port", 8750)): int,
        })

        return self.async_show_form(
            step_id="init",
            data_schema=data_schema
        )
 
Current contents of [const.py]: 
DOMAIN = "control4_amp"
 
Current contents of [media_player.py]: 
import logging
from homeassistant.components.media_player import MediaPlayerEntity
from homeassistant.components.media_player.const import (
    SUPPORT_TURN_ON,
    SUPPORT_TURN_OFF,
    SUPPORT_VOLUME_SET,
)
from homeassistant.const import STATE_OFF, STATE_ON

_LOGGER = logging.getLogger(__name__)

SUPPORT_CONTROL4_AMP = SUPPORT_TURN_ON | SUPPORT_TURN_OFF | SUPPORT_VOLUME_SET

async def async_setup_entry(hass, config_entry, async_add_entities):
    async_add_entities([Control4Amp(config_entry.data)])

class Control4Amp(MediaPlayerEntity):
    def __init__(self, config):
        self._host = config["host"]
        self._port = config["port"]
        self._state = STATE_OFF
        self._volume = 0

    @property
    def name(self):
        return "Control4 Amplifier"

    @property
    def state(self):
        return self._state

    @property
    def supported_features(self):
        return SUPPORT_CONTROL4_AMP

    async def async_turn_on(self):
        self._state = STATE_ON
        # Add code to send turn on command to the amplifier
        self.async_write_ha_state()

    async def async_turn_off(self):
        self._state = STATE_OFF
        # Add code to send turn off command to the amplifier
        self.async_write_ha_state()

    async def async_set_volume_level(self, volume):
        self._volume = volume
        # Add code to set volume on the amplifier
        self.async_write_ha_state()
 
Current contents of [udp_communication.py]: 
import asyncio
import logging

_LOGGER = logging.getLogger(__name__)

class UDPCommunication:
    """Class to handle UDP communication with Control4 Amp."""

    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        self.transport = None
        self.loop = asyncio.get_event_loop()

    def connection_made(self, transport):
        """Called when the connection is made."""
        self.transport = transport
        _LOGGER.info('UDP connection made to %s:%s', self.ip, self.port)

    def datagram_received(self, data, addr):
        """Handle received data."""
        message = data.decode()
        _LOGGER.info('Received message: %s from %s', message, addr)
        # Further processing logic here

    def error_received(self, exc):
        """Handle received error."""
        _LOGGER.error('UDP error received: %s', exc)

    def connection_lost(self, exc):
        """Handle connection lost."""
        _LOGGER.warning('UDP connection lost: %s', exc)

    async def start(self):
        """Start UDP server."""
        self.transport, _ = await self.loop.create_datagram_endpoint(
            lambda: self,
            remote_addr=(self.ip, self.port)
        )
        _LOGGER.info('UDP server started on %s:%s', self.ip, self.port)

    async def stop(self):
        """Stop UDP server."""
        if self.transport:
            self.transport.close()
            _LOGGER.info('UDP connection closed')

    def send_data(self, data):
        """Send data via UDP."""
        if self.transport:
            self.transport.sendto(data.encode(), (self.ip, self.port))
            _LOGGER.info('Sent data: %s to %s:%s', data, self.ip, self.port)

    def request_firmware_version(self, callback):
        """Request firmware version from the amp."""
        self.send_data("0gha00 c4.sy.fwv\r\n")
        self.firmware_callback = callback

    def handle_response(self, data):
        """Process the response from the amp."""
        # Parse and handle the response here
        if self.firmware_callback:
            self.firmware_callback(data)
 
Current contents of [__init__.py]: 
from homeassistant.core import HomeAssistant

DOMAIN = "control4_amp"

async def async_setup(hass: HomeAssistant, config: dict):
    """Set up the Control4 Amplifier component."""
    return True

async def async_setup_entry(hass: HomeAssistant, entry):
    """Set up Control4 Amplifier from a config entry."""
    hass.async_add_job(hass.config_entries.async_forward_entry_setup(entry, "media_player"))
    return True

async def async_unload_entry(hass: HomeAssistant, entry):
    """Unload a config entry."""
    await hass.config_entries.async_forward_entry_unload(entry, "media_player")
    return True
 
Current contents of [hacs.json]: 
{
  "name": "Control4 AMP",
  "domains": "media_player",
  "iot_class": "Local Push",
  "homeassistant": "2021.9.3"
}
 
Current contents of [manifest.json]: 
{
  "domain": "control4_amp",
  "name": "Control4 Amplifier",
  "version": "0.0.13",
  "documentation": "https://www.example.com",
  "dependencies": [],
  "codeowners": ["@heatvent"],
  "requirements": [],
  "config_flow": true
}

 
