Current contents of [config_flow.py]: 
import logging
import ipaddress
import voluptuous as vol
from homeassistant import config_entries, exceptions
from homeassistant.core import callback
from homeassistant.const import CONF_IP_ADDRESS, CONF_PORT, CONF_NAME
from .const import DOMAIN

_LOGGER = logging.getLogger(__name__)

class Control4AmpConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):
    """Manage the Control4 Amp configuration flow."""

    VERSION = 1
    CONNECTION_CLASS = config_entries.CONN_CLASS_LOCAL_PUSH

    @staticmethod
    @callback
    def async_get_options_flow(config_entry):
        return OptionsFlow(config_entry)

    async def async_step_user(self, user_input=None):
        """Handle a flow initialized by the user interface."""
        errors = {}
        if user_input is not None:
            try:
                ipaddress.ip_address(user_input[CONF_IP_ADDRESS])
                if user_input[CONF_PORT] <= 0 or user_input[CONF_PORT] > 65535:
                    raise ValueError("Invalid port number.")
                _LOGGER.debug("Processing user input: %s", user_input)
                return self.async_create_entry(title="Control4 Amp", data=user_input)
            except ValueError as e:
                _LOGGER.error("Validation error: %s", e)
                errors["base"] = "invalid_input"

        return self.async_show_form(
            step_id="user",
            data_schema=vol.Schema({
                vol.Required(CONF_NAME): str,
                vol.Required(CONF_IP_ADDRESS): str,
                vol.Required(CONF_PORT, default=8750): int,
            }),
            errors=errors
        )

class InvalidInput(exceptions.HomeAssistantError):
    """Error to indicate the input is invalid."""

class OptionsFlow(config_entries.OptionsFlow):
    """Handle an options flow for Control4 Amp."""

    def __init__(self, config_entry):
        self.config_entry = config_entry

    async def async_step_init(self, user_input=None):
        """Manage the options."""
        return await self.async_step_user()

    async def async_step_user(self, user_input=None):
        """Handle a flow initialized by the user."""
        if user_input is not None:
            return self.async_create_entry(title="", data=user_input)

        return self.async_show_form(
            step_id="user",
            data_schema=vol.Schema({
                vol.Optional(CONF_IP_ADDRESS, default=self.config_entry.options.get(CONF_IP_ADDRESS)): str,
                vol.Optional(CONF_PORT, default=self.config_entry.options.get(CONF_PORT)): int,
            })
        )
 
Current contents of [const.py]: 
DOMAIN = "control4_amp"
 
Current contents of [media_player.py]: 
import logging
from homeassistant.core import HomeAssistant
from homeassistant.config_entries import ConfigEntry
from homeassistant.components.media_player import MediaPlayerEntity, MediaPlayerEntityFeature
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.entity import DeviceInfo
from .const import DOMAIN
from .udp_communication import UDPCommunication

_LOGGER = logging.getLogger(__name__)

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry, async_add_entities: AddEntitiesCallback):
    """Set up Control4 Amp Media Player from a config entry."""
    udp_comm = UDPCommunication(hass, entry.data["ip_address"], entry.data["port"])
    await udp_comm.start()
    name = entry.data.get("name")
    amp = Control4AmpMediaPlayer(name=name, unique_id=f"{entry.entry_id}_amp", device_info={
        "identifiers": {(DOMAIN, f"{entry.entry_id}_amp")},
        "name": name,
        "manufacturer": "Control4",
        "model": "C4-8AMP1-B",
        "sw_version": "1.0",
        "via_device": (DOMAIN, f"{entry.entry_id}")
    }, udp_comm=udp_comm)
    zones = [Control4AmpMediaPlayer(name=f"{name} Zone {i+1}", unique_id=f"{entry.entry_id}_zone{i+1}", device_info={
        "identifiers": {(DOMAIN, f"{entry.entry_id}_zone{i+1}")},
        "name": f"{name} Zone {i+1}",
        "manufacturer": "Control4",
        "model": "Zone Amplifier",
        "sw_version": "1.0",
        "via_device": (DOMAIN, f"{entry.entry_id}_amp")
    }, udp_comm=udp_comm) for i in range(4)]
    async_add_entities([amp] + zones)

class Control4AmpMediaPlayer(MediaPlayerEntity):
    """A class representing a Control4 Amp media player."""

    def __init__(self, name, unique_id, device_info, udp_comm):
        self._name = name
        self._unique_id = unique_id
        self._device_info = device_info
        self._state = None
        self.udp_comm = udp_comm

    async def async_added_to_hass(self):
        """When entity is added to Home Assistant, request firmware."""
        await super().async_added_to_hass()
        self.udp_comm.request_firmware_version()

    @property
    def unique_id(self):
        """Return a unique identifier for this device."""
        return self._unique_id

    @property
    def device_info(self):
        """Return device information."""
        return self._device_info

    @property
    def name(self):
        """Return the name of the device."""
        return self._name

    @property
    def state(self):
        """Return the state of the device."""
        return self._state

    @property
    def supported_features(self):
        """Return the supported features."""
        return MediaPlayerEntityFeature.PLAY | MediaPlayerEntityFeature.PAUSE
 
Current contents of [udp_communication.py]: 
import asyncio
import logging
from homeassistant.helpers.dispatcher import async_dispatcher_send
from .const import DOMAIN

_LOGGER = logging.getLogger(__name__)

class UDPCommunication:
    """Class to handle UDP communication with Control4 Amp."""

    def __init__(self, hass, ip, port):
        self.hass = hass
        self.ip = ip
        self.port = port
        self.transport = None
        self.loop = asyncio.get_running_loop()
        self.sequence = 0

    def connection_made(self, transport):
        """Handle connection made event."""
        self.transport = transport
        _LOGGER.info("Connection made with %s:%s", self.ip, self.port)

    def datagram_received(self, data, addr):
        """Handle incoming UDP data."""
        message = data.decode()
        _LOGGER.info("Received from %s: %s", addr, message)
        self.handle_response(message)

    def error_received(self, exc):
        """Handle errors."""
        _LOGGER.error("UDP error received: %s", exc)

    def connection_lost(self, exc):
        """Handle connection lost."""
        _LOGGER.warning("UDP connection lost: %s", exc)
        self.transport = None

    async def start(self):
        """Start UDP server."""
        self.transport, _ = await self.loop.create_datagram_endpoint(
            lambda: self,
            remote_addr=(self.ip, self.port)
        )

    async def stop(self):
        """Stop UDP server."""
        if self.transport:
            self.transport.close()
            _LOGGER.info("UDP connection closed")

    def send_data(self, command):
        """Send data to Control4 Amp."""
        data = f'0g{self.sequence:02d}ha00 {command}\r\n'
        if self.transport:
            self.transport.sendto(data.encode(), (self.ip, self.port))
            _LOGGER.info("Sent: %s", data)
        self.sequence = (self.sequence + 1) % 100  # Wrap around at 99

    def handle_response(self, message):
        """Handle responses from the amplifier."""
        if "c4.sy.fwv" in message:
            version = message.split('"')[1]
            _LOGGER.info("Firmware version: %s", version)
            async_dispatcher_send(self.hass, f"{DOMAIN}_update_firmware", version)

    def request_firmware_version(self):
        """Send command to request firmware version."""
        self.send_data("c4.sy.fwv")
 
Current contents of [__init__.py]: 
from homeassistant.core import HomeAssistant
from homeassistant.config_entries import ConfigEntry
from .const import DOMAIN

async def async_setup(hass: HomeAssistant, config: dict):
    """Set up configured Control4 Amp."""
    return True

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry):
    """Set up Control4 Amp from a config entry."""
    hass.data.setdefault(DOMAIN, {})[entry.entry_id] = entry.data
    await hass.config_entries.async_forward_entry_setups(entry, ["media_player"])
    return True

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry):
    """Unload a config entry."""
    await hass.config_entries.async_unload_platforms(entry, ["media_player"])
    return True
 
Current contents of [hacs.json]: 
{
  "name": "Control4 AMP",
  "domains": "media_player",
  "iot_class": "Local Push",
  "homeassistant": "2021.9.3"
}
 
Current contents of [manifest.json]: 
{
  "domain": "control4_amp",
  "name": "Control4 Amplifier",
  "version": "0.1.01",
  "documentation": "https://www.example.com",
  "dependencies": [],
  "codeowners": ["@heatvent"],
  "requirements": [],
  "config_flow": true
}

 
